import OpenAI from 'openai';
import { ScoreDetails } from './scoreCalculator';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface ReportData {
  type: 'autodiagnostic' | 'evaluation';
  person: {
    firstName: string;
    lastName: string;
    age: string;
    profession: string;
  };
  evaluator?: {
    firstName: string;
    lastName: string;
  };
  scores: { [key: string]: ScoreDetails };
  scoresTable: Array<{
    critere: string;
    question: string;
    score: number;
    sens: string;
  }>;
}

export async function generateReportContent(data: ReportData): Promise<string> {
  // Pr√©parer le tableau de scores pour le prompt
  const scoresTableText = data.scoresTable
    .map(row => `${row.critere}\t${row.question}\t${row.score}\t${row.sens}`)
    .join('\n');
  
  // Pr√©parer le r√©sum√© des scores par crit√®re
  const scoresSummary = Object.values(data.scores)
    .map(s => `${s.critere}: Score total = ${s.scoreTotal}, Note sur 5 = ${s.noteSur5}`)
    .join('\n');
  
  const isEvaluation = data.type === 'evaluation';
  const evaluatorName = data.evaluator?.firstName || '';
  const evaluatedName = data.person.firstName;
  
  const systemPrompt = `Tu es consultant¬∑e RH senior, expert¬∑e de l'analyse du potentiel.
Ta mission : transformer les r√©sultats d'un questionnaire d'√©valuation en rapport structur√©, nuanc√© et exploitable.

üìé Sources disponibles
- Tableau de scores globaux (1 ‚Äì 5) pour chacun des 12 crit√®res.
- Tableau de r√©ponses d√©taill√©es avec crit√®re, texte de l'item, score (0-4), et valence (normal/invers√©).
- R√©f√©rentiel officiel "12 crit√®res 2025" : d√©finitions, points d'attention, leviers de d√©veloppement.

üìè Bar√®me d'interpr√©tation
Score ‚â• 4,2 : Point fort
Score 3,3 ‚Äì 4,1 : Dimension solide
Score 2,3 ‚Äì 3,2 : Axe de progression
Score < 2,3 : Point de vigilance

‚ö†Ô∏è Traitement imp√©ratif des items invers√©s
- Un score √©lev√© doit toujours √™tre interpr√©t√© positivement, quelle que soit la valence.
- Ne jamais r√©v√©ler qu'un item est "invers√©" ou "normal".
- L'analyse refl√®te le sens r√©el de la r√©ponse, jamais la forme de l'item.

${isEvaluation ? `
üîÑ Mode √©valuation
- Le rapport pr√©sente le point de vue de ${evaluatorName} qui √©value ${evaluatedName}.
- Varier les formulations : "selon ${evaluatorName}", "d'apr√®s ${evaluatorName}", "${evaluatorName} observe que", "${evaluatorName} note que", etc.
- Utiliser uniquement les pr√©noms, jamais les noms de famille.
` : ''}

üß† Structure du rapport √† produire

RAPPORT ${isEvaluation ? "D'√âVALUATION DU POTENTIEL" : "D'AUTODIAGNOSTIC"}

${data.person.firstName} ${data.person.lastName}, ${data.person.age} ans, ${data.person.profession}
${isEvaluation ? `√âvalu√© par ${data.evaluator?.firstName} ${data.evaluator?.lastName}` : ''}

1. Analyse crit√®re par crit√®re

FAMILLE ¬´ VOULOIR ¬ª (MOTEUR PERSONNEL)

AMBITION
Volont√© de progresser dans sa carri√®re en construisant un parcours porteur de sens
Score : [x,x] ‚Äì [Interpr√©tation]
[Analyse qualitative ‚Äì 120 √† 180 mots]

[R√©p√©ter pour les 12 crit√®res dans l'ordre]

2. Analyse du profil d'ensemble
[R√©sum√© transversal ‚Äì 200 √† 300 mots]

3. Points de vigilance
- 4 √† 8 points, bullet liste

4. Recommandations de d√©veloppement
- 1 √† 2 recommandations par point de vigilance

5. Conclusion synth√©tique
[80 √† 120 mots]

R√®gles :
- Utiliser la virgule comme s√©parateur d√©cimal (3,4 et non 3.4)
- Ton professionnel, clair, bienveillant
- Analyses de 120-180 mots par crit√®re
- Longueur totale : 1600-2300 mots`;

  const userPrompt = `G√©n√®re le rapport complet bas√© sur ces r√©sultats :

Informations personnelles :
- Pr√©nom : ${data.person.firstName}
- Nom : ${data.person.lastName}
- √Çge : ${data.person.age} ans
- Profession : ${data.person.profession}
${isEvaluation ? `- √âvaluateur : ${data.evaluator?.firstName} ${data.evaluator?.lastName}` : ''}

Scores par crit√®re :
${scoresSummary}

D√©tail des r√©ponses :
Crit√®re\tQuestion\tScore\tValence
${scoresTableText}

G√©n√®re le rapport en respectant EXACTEMENT la structure demand√©e.`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 4000,
    });

    return response.choices[0].message.content || '';
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration du rapport:', error);
    throw new Error('Impossible de g√©n√©rer le rapport');
  }
} 